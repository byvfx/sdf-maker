# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# RustRover/IntelliJ IDEA
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/
*.code-workspace

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini

# Linux
*~
.directory

# Vim
*.swp
*.swo
*~

# Emacs
*~
\#*\#
.\#*

# Test output images (generated by examples)
test_*.png
sdf_*.png

# Benchmark results
*.bench
bench_results/

# Documentation build
/target/doc
/target/criterion

# Environment files
.env
.env.local

# Log files
*.log

# Temporary files
*.tmp
*.temp
tmp/
temp/

# Coverage files
*.profraw
*.profdata
/coverage/
lcov.info

# Python cache (if using any Python scripts)
__pycache__/
*.pyc

# Node modules (if using any web-based tools)
node_modules/

# Build artifacts
*.o
*.a
*.so
*.dll
*.dylib
*.exe

# Backup files
*.bak
*.backup
*_backup

# Archive files
*.zip
*.tar.gz
*.rar

# IDE specific
.project
.classpath
.settings/

# Local configuration
config.local.toml
settings.local.json

# Output directories for batch processing
output/
sdf_output/
processed/

# Cache directories
.cache/
cache/

# Performance profiling
perf.data
perf.data.old
flamegraph.svg
*.trace